#Maxwell Huff
model1 = ezANOVA(nomiss_mh,
wid = Subject,
within = Score_Type,
dv = Score,
type = 3,
detailed = T)
model1
model1$ANOVA$MSE = model1$ANOVA$SSd/model1$ANOVA$DFd
model1$ANOVA$MSE
table(nomiss_mb$Score)
nomiss_mb$Score = nomiss_mb$Score * 100
model1
####Get descriptives for both datasets####
m_h = read.csv("Maxwell Huff Scored.csv")
m_b = read.csv("maxwell_buchanan scored.csv")
summary(m_h)
summary(m_b)
##Get mean manually coded
mean(m_h$Manual_Scored, na.rm = T)
mean(m_b$manually_coded, na.rm = T)
##Now get means for each scoring criteria
apply(m_h[ , 8:13], 2, mean)
apply(m_b[ , 8:13], 2, mean)
####Let's run some stats!####
library(data.table)
library(ez)
options(scipen = 999)
m_h$Subject = as.character(m_h$Subject)
m_b$Sub.ID = as.character(m_b$Sub.ID)
##Melt the things
#Maxwell and Huff data
long.mh = melt(m_h[, -7])
colnames(long.mh)[6] = "Score_Type"
colnames(long.mh)[7] = "Score"
#Maxwell & Buchanan data
long.mb = melt(m_b[ , -7])
colnames(long.mb)[6] = "Score_Type"
colnames(long.mb)[7] = "Score"
##remove missing
nomiss_mh = na.omit(long.mh)
nomiss_mb = na.omit(long.mb)
table(nomiss_mh$Score)
nomiss_mh$Score = nomiss_mh$Score * 100
##Anova
#Maxwell Huff
model1 = ezANOVA(nomiss_mh,
wid = Subject,
within = Score_Type,
dv = Score,
type = 3,
detailed = T)
model1
model1$ANOVA$MSE = model1$ANOVA$SSd/model1$ANOVA$DFd
model1$ANOVA$MSE
table(nomiss_mb$Score)
nomiss_mb$Score = nomiss_mb$Score * 100
##Maxwell Buchanan
model2 = ezANOVA(nomiss_mb,
wid = Sub.ID,
within = Score_Type,
dv = Score,
type = 3,
detailed = T)
model2
setwd("~/GitHub/lrd-analysis/Free Recall/NEW/4 Scored Datasets/Adhoc")
setwd("~/GitHub/lrd-analysis/Free Recall/NEW/4 Scored Datasets")
####set up####
##load datasets
unrel = read.csv("Unrel_final.csv")
cat = read.csv("cat_final.csv")
adhoc = read.csv("adhoc_final.csv")
##load libraries
library(psych)
library(ez)
library(reshape)
options(scipen = 999)
####Descriptives####
##Get means
apply(unrel[ , c(6:12)], 2, mean, na.rm = T)
apply(cat[ , c(5:11)], 2, mean, na.rm = T)
apply(adhoc[ , c(5:11)], 2, mean, na.rm = T)
##Get 95% CI's
#Adhoc
adhoc.long = melt(adhoc, measure.vars = c("Human", "Lev0", "Lev1", "Lev2", "Lev3", "Lev4", "Lev5"))
colnames(adhoc.long)[5:6] = c("Score_Type", "Score")
adhoc.wide = cast(adhoc.long, Username ~ Score_Type, mean, na.rm = T)
(apply(adhoc.wide[ , c(2:8)], 2, sd) / sqrt(length(unique(adhoc.wide$Username)))) * 1.96
#Cat
cat.long = melt(cat, measure.vars = c("Human", "Lev0", "Lev1", "Lev2", "Lev3", "Lev4", "Lev5"))
colnames(cat.long)[5:6] = c("Score_Type", "Score")
cat.wide = cast(cat.long, Username ~ Score_Type, mean, na.rm = T)
(apply(cat.wide[ , c(2:8)], 2, sd) / sqrt(length(unique(cat.wide$Username)))) * 1.96
##Unrelated
unrel.long = melt(unrel, measure.vars = c("Human", "Lev0", "Lev1", "Lev2", "Lev3", "Lev4", "Lev5"))
colnames(unrel.long)[6:7] = c("Score_Type", "Score")
unrel.wide = cast(unrel.long, Username ~ Score_Type, mean, na.rm = T)
(apply(unrel.wide[ , c(2:8)], 2, sd) / sqrt(length(unique(unrel.wide$Username)))) * 1.96
##Fix score scale
adhoc.long$Score = adhoc.long$Score * 100
unrel.long$Score = unrel.long$Score * 100
cat.long$Score = cat.long$Score * 100
cat2 = na.omit(cat.long)
unrel2 = na.omit(unrel.long)
adhoc2 = na.omit(adhoc.long)
####Run the ANOVA####
##Adhoc
model1 = ezANOVA(adhoc2,
wid = Username,
between = Score_Type,
dv = Score,
detailed = T,
type = 3)
model1$ANOVA$MSE = model1$ANOVA$SSd/model1$ANOVA$DFd
model1
##categorical
model2 = ezANOVA(cat2,
wid = Username,
between = Score_Type,
dv = Score,
detailed = T,
type = 3)
model2$ANOVA$MSE = model2$ANOVA$SSd/model2$ANOVA$DFd
model2
##unrelated
model3 = ezANOVA(unrel2,
wid = Username,
between = Score_Type,
dv = Score,
detailed = T,
type = 3)
model3$ANOVA$MSE = model3$ANOVA$SSd/model3$ANOVA$DFd
model3
####Make table 12####
##Start w/ adhoc
apply(adhoc.wide[ , 2:length(adhoc.wide)], 2, mean)
apply(adhoc.wide[ , 2:length(adhoc.wide)], 2, sd)
##Now do categorical
apply(cat.wide[ , 2:length(cat.wide)], 2, mean)
apply(cat.wide[ , 2:length(cat.wide)], 2, sd)
##And finally the unrelated list
apply(unrel.wide[ , 2:length(unrel.wide)], 2, mean)
apply(unrel.wide[ , 2:length(unrel.wide)], 2, sd)
####Kappas####
cohen.kappa(unrel[ , c(6:12)]) #Unrelated
cohen.kappa(adhoc[ , c(5:11)]) #Adhoc
cohen.kappa(cat[ , c(5:11)]) #categorical
20*6
120*6
720*3
120*6
720*20
model3
model2
model1
setwd("~/GitHub/lrd-analysis/Sentences")
####Analysis!####
library(psych)
library(ez)
options(scipen = 999)
####Okay, first going to look at the trial level proportion correct####
##These analyses are looking at whether the words in the sentences were correctly recalled
dat = read.csv("scored_combined.csv")
length(unique(dat$Participant.Private.ID))
dat2 = dat[ , -c(18:23)]
long.dat = melt(dat2,
measure.vars = c("Prop1", "Prop2", "lrd_0", "lrd_1", "lrd_2", "lrd_3", "lrd_4", "lrd_5"))
colnames(long.dat)[10:11] = c("Rater", "Score")
#run an ANOVA
model = ezANOVA(long.dat,
within = Rater,
dv = Score,
wid = Participant.Private.ID,
type = 3,
detailed = T)
model
#Effect should be driven by differences between the upper and lower
#Get mean recall rates
apply(dat2[ , c(10:17)], 2, mean) #Yep, that seems to be the case
#t.test time
post_hoc = cast(long.dat, Participant.Private.ID ~ Rater, mean)
#Rater 1 vs lrd data
temp1 = t.test(post_hoc$Prop1, post_hoc$lrd_0, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$Prop1, post_hoc$lrd_1, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$Prop1, post_hoc$lrd_2, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$Prop1, post_hoc$lrd_3, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$Prop1, post_hoc$lrd_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$Prop1, post_hoc$lrd_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
##rater 2
temp1 = t.test(post_hoc$Prop2, post_hoc$lrd_0, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$Prop2, post_hoc$lrd_1, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$Prop2, post_hoc$lrd_2, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$Prop2, post_hoc$lrd_3, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$Prop2, post_hoc$lrd_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$Prop2, post_hoc$lrd_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
##All the lrd's vs each other
#0
temp1 = t.test(post_hoc$lrd_0, post_hoc$lrd_1, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$lrd_0, post_hoc$lrd_2, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_0, post_hoc$lrd_3, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_0, post_hoc$lrd_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_0, post_hoc$lrd_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
#1
temp1 = t.test(post_hoc$lrd_1, post_hoc$lrd_2, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #marginal
temp1 = t.test(post_hoc$lrd_1, post_hoc$lrd_3, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_1, post_hoc$lrd_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_1, post_hoc$lrd_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
#2
temp1 = t.test(post_hoc$lrd_2, post_hoc$lrd_3, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #marginal
temp1 = t.test(post_hoc$lrd_2, post_hoc$lrd_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_2, post_hoc$lrd_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
#3
temp1 = t.test(post_hoc$lrd_3, post_hoc$lrd_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$lrd_3, post_hoc$lrd_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #marg
#4
temp1 = t.test(post_hoc$lrd_4, post_hoc$lrd_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
#get cohen's kappa
cohen.kappa(dat[ , c(10:17)])
####Now let's do whether a sentence was scored as correct####
dat3 = dat[ , -c(10:17)]
long.dat2 = melt(dat3,
measure.vars = c("Corr1", "Corr2", "lrd_cor_0", "lrd_cor_1",
"lrd_cor_2", "lrd_cor_3", "lrd_cor_4", "lrd_cor_5"))
colnames(long.dat2)[8:9] = c("Rater", "Score")
long.dat3 = subset(long.dat2,
long.dat2$Rater != "Corr2")
long.dat4 = subset(long.dat2,
long.dat2$Rater != "Corr1")
long.dat3$Score = long.dat3$Score * 100
long.dat4$Score = long.dat4$Score * 100
#run an ANOVA
#Rater 1 vs lrd
model2 = ezANOVA(long.dat3,
within = Rater,
dv = Score,
wid = Participant.Private.ID,
type = 3,
detailed = T)
model2
model2$ANOVA$MSE = model2$ANOVA$SSd/model2$ANOVA$DFd
model2$ANOVA$MSE
#rater 2 vs lrd
model3 = ezANOVA(long.dat4,
within = Rater,
dv = Score,
wid = Participant.Private.ID,
type = 3,
detailed = T)
model3
model3$ANOVA$MSE = model3$ANOVA$SSd/model3$ANOVA$DFd
model3$ANOVA$MSE
#Get means for table 14
apply(dat3[ , c(7, 9:15)] * 100, 2, mean)
#Get sds
apply(post_hoc[ , -1] * 100, 2, sd)
#CIs
(apply(post_hoc[ , -1] * 100, 2, sd) / sqrt(length(unique(post_hoc$Participant.Private.ID)))) * 1.96
##post_hocs
post_hoc = cast(long.dat2, Participant.Private.ID ~ Rater, mean)
##Rater 1 vs lrd data
temp1 = t.test(post_hoc$Corr1, post_hoc$lrd_cor_0, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$Corr1, post_hoc$lrd_cor_1, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$Corr1, post_hoc$lrd_cor_2, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$Corr1, post_hoc$lrd_cor_3, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$Corr1, post_hoc$lrd_cor_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$Corr1, post_hoc$lrd_cor_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
##rater 2
temp1 = t.test(post_hoc$Corr2, post_hoc$lrd_cor_0, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$Corr2, post_hoc$lrd_cor_1, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$Corr2, post_hoc$lrd_cor_2, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$Corr2, post_hoc$lrd_cor_3, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$Corr2, post_hoc$lrd_cor_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$Corr2, post_hoc$lrd_cor_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
##All the lrd's vs each other
#0
temp1 = t.test(post_hoc$lrd_cor_0, post_hoc$lrd_cor_1, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #marginal
temp1 = t.test(post_hoc$lrd_cor_0, post_hoc$lrd_cor_2, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_cor_0, post_hoc$lrd_cor_3, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_cor_0, post_hoc$lrd_cor_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_cor_0, post_hoc$lrd_cor_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
#1
temp1 = t.test(post_hoc$lrd_cor_1, post_hoc$lrd_cor_2, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
temp1 = t.test(post_hoc$lrd_cor_1, post_hoc$lrd_cor_3, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_cor_1, post_hoc$lrd_cor_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_cor_1, post_hoc$lrd_cor_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
#2
temp1 = t.test(post_hoc$lrd_cor_2, post_hoc$lrd_cor_3, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_cor_2, post_hoc$lrd_cor_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(post_hoc$lrd_cor_2, post_hoc$lrd_cor_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
#3
temp1 = t.test(post_hoc$lrd_cor_3, post_hoc$lrd_cor_4, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #marginal
temp1 = t.test(post_hoc$lrd_cor_3, post_hoc$lrd_cor_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
#4
temp1 = t.test(post_hoc$lrd_cor_4, post_hoc$lrd_cor_5, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #non-sig
##Cohen's kappa
cohen.kappa(dat3[ , c(7, 9:15)])
